---
description: Este documento establece un conjunto completo de directrices y estándares para el desarrollo del proyecto ESP_MQTT_Vibe utilizando el IDE Cursor. Funciona como una guía de referencia que asegura la consistencia en el código, optimiza el flujo de trabajo y facilita la colaboración entre desarrolladores. El documento abarca seis áreas fundamentales: Configuración del Entorno: Detalla las extensiones recomendadas para Cursor y las configuraciones óptimas del editor que mejoran la experiencia de programación para proyectos basados en ESP32 y PlatformIO. Convenciones de Código: Define una estructura clara de archivos y establece normas de codificación, incluyendo estilo de indentación, nomenclatura de variables y funciones, y formato de comentarios, todo ilustrado con ejemplos prácticos. Gestión de Control de Versiones: Proporciona una estructura organizada para el flujo de trabajo con Git, incluyendo convenciones para ramas y un formato estandarizado para mensajes de commit que facilita el seguimiento de cambios. Herramientas de Depuración: Incluye configuraciones para el monitor serial y comandos específicos para la depuración de componentes WiFi y MQTT, fundamentales para el desarrollo de sistemas IoT. Proceso de Despliegue: Establece un procedimiento simple pero efectivo para la compilación, versionado y documentación de cambios antes de cada release. Recursos Técnicos: Recopila enlaces a documentación oficial relevante para el desarrollo del proyecto, desde la referencia del ESP32-H2 hasta las bibliotecas utilizadas. Este documento sirve como punto de referencia unificado para cualquier desarrollador que trabaje en el proyecto, asegurando que el código sea mantenible, legible y siga las mejores prácticas establecidas para el desarrollo de firmware en dispositivos ESP32 con conectividad MQTT.
globs: 
alwaysApply: false
---
# Reglas de Cursor para ESP_MQTT_Vibe

Este documento define las convenciones, configuraciones y mejores prácticas para trabajar con el proyecto ESP_MQTT_Vibe utilizando el IDE Cursor.

## Configuración del Entorno

### Extensiones Recomendadas

Para una mejor experiencia de desarrollo, se recomienda tener las siguientes extensiones en Cursor:

- **PlatformIO**: Para compilación y carga de firmware
- **C/C++**: Para autocompletado y navegación por el código
- **ESP-IDF**: Para funcionalidades específicas de ESP32
- **MQTT Explorer**: Para pruebas y depuración de MQTT

### Configuración del Editor

```json
{
  "editor.formatOnSave": true,
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "files.eol": "\n",
  "C_Cpp.clang_format_style": "{ BasedOnStyle: Google, IndentWidth: 2, ColumnLimit: 100 }",
  "C_Cpp.formatting": "clangFormat"
}
```

## Convenciones de Código

### Estructura de Archivos

```
ESP_MQTT_Vibe/
├── src/
│   ├── main.cpp            # Archivo principal
│   ├── wifi_manager.cpp    # Gestión de WiFi (opcional)
│   ├── mqtt_manager.cpp    # Gestión de MQTT (opcional)
│   └── sensor_handler.cpp  # Manejo del sensor (opcional)
├── include/
│   ├── wifi_manager.h
│   ├── mqtt_manager.h
│   └── sensor_handler.h
├── lib/                    # Bibliotecas locales
├── test/                   # Pruebas unitarias
├── platformio.ini          # Configuración de PlatformIO
└── README.md               # Documentación
```

### Estilo de Codificación

1. **Indentación**: Usar 2 espacios para la indentación, no tabulaciones.
2. **Llaves**: Estilo K&R (llave de apertura en la misma línea que la declaración).
3. **Nombres de variables**:
   - Variables locales: `camelCase`
   - Variables miembro: `m_camelCase`
   - Constantes: `UPPER_SNAKE_CASE`
4. **Nombres de funciones**: `camelCase`
5. **Comentarios**: Documentar todas las funciones con un breve comentario explicativo.

### Ejemplo de Formato de Código

```cpp
/**
 * Detecta vibraciones en el sensor y determina el estado de la caldera.
 * @return true si la caldera está encendida, false en caso contrario
 */
bool detectVibration() {
  sensors_event_t event;
  accel.getEvent(&event);
  
  // Cálculo de magnitud
  float magnitude = calculateMagnitude(event);
  
  return magnitude > VIBRATION_THRESHOLD;
}
```

## Flujo de Trabajo Git

### Ramas

- `main`: Rama principal, contiene código estable
- `develop`: Rama de desarrollo, integración de nuevas características
- `feature/XXX`: Para nuevas características
- `bugfix/XXX`: Para corrección de errores

### Commit Messages

Seguir el formato:

```
<tipo>(<alcance>): <descripción>

[cuerpo opcional]

[pie opcional]
```

Donde:
- `<tipo>` puede ser: feat, fix, docs, style, refactor, test, chore
- `<alcance>` es opcional y puede ser: wifi, mqtt, sensor, ota

Ejemplo:
```
feat(sensor): implementar ajuste dinámico de sensibilidad

- Añade ajuste automático basado en condiciones ambientales
- Mejora precisión de detección en 15%

Issue: #12
```

## Depuración

### Configuración de Serial Monitor

En PlatformIO:
- Velocidad: 115200 baud
- Usar Serial.println() para debugging

### Depuración WiFi/MQTT

Comandos útiles para el monitor serial:
```
WIFI: Check connection status
MQTT: Display current subscription topics
SENSOR: Show last 5 readings
THRESHOLD: Display current sensitivity threshold
```

## Despliegue

1. Compilar con PlatformIO antes de cada commit importante
2. Actualizar número de versión en `main.cpp` para cada release
3. Documentar cambios en `CHANGELOG.md`

## Recursos

- [Documentación ESP32-H2](https://docs.espressif.com/projects/esp-idf/en/latest/esp32h2/index.html)
- [PlatformIO ESP32 Docs](https://docs.platformio.org/en/latest/platforms/espressif32.html)
- [Biblioteca ADXL345](https://adafruit.github.io/Adafruit_ADXL345/html/class_adafruit___a_d_x_l345___unified.html)
- [PubSubClient](https://pubsubclient.knolleary.net/)